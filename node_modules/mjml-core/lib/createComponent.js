'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.createBodyComponent = createBodyComponent;
exports.createHeadComponent = createHeadComponent;
exports.default = createComponent;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _objectPath = require('object-path');

var _objectPath2 = _interopRequireDefault(_objectPath);

var _components = require('./components');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

function createBodyComponent(name, component) {
  return createComponent('body', name, component);
}

function createHeadComponent(name, component) {
  return createComponent('head', name, component);
}

function createComponent(type, name, component) {
  var _dec, _dec2, _dec3, _dec4, _dec5, _desc, _value, _class;

  var onlyFor = function onlyFor(forType) {
    return function (target, key, desc) {
      var fn = desc.value;

      desc.value = function () {
        if (forType !== type) {
          throw new Error('This method can be use only with a ' + type + ' component.');
        }

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return fn.apply(this, args);
      };
    };
  };

  var Component = (_dec = onlyFor('body'), _dec2 = onlyFor('body'), _dec3 = onlyFor('body'), _dec4 = onlyFor('body'), _dec5 = onlyFor('body'), (_class = function () {
    _createClass(Component, null, [{
      key: 'getName',
      value: function getName() {
        return name;
      }
    }, {
      key: 'getType',
      value: function getType() {
        return type;
      }
    }]);

    function Component() {
      var initialDatas = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, Component);

      var _initialDatas$attribu = initialDatas.attributes,
          attributes = _initialDatas$attribu === undefined ? {} : _initialDatas$attribu,
          _initialDatas$childre = initialDatas.children,
          children = _initialDatas$childre === undefined ? [] : _initialDatas$childre,
          _initialDatas$content = initialDatas.content,
          content = _initialDatas$content === undefined ? '' : _initialDatas$content,
          _initialDatas$context = initialDatas.context,
          context = _initialDatas$context === undefined ? {} : _initialDatas$context,
          _initialDatas$props = initialDatas.props,
          props = _initialDatas$props === undefined ? {} : _initialDatas$props;


      this.props = _extends({}, props, {
        children: children,
        content: content
      });

      this.attributes = _extends({}, component.attributes, attributes);
      this.context = context;

      return this;
    }

    _createClass(Component, [{
      key: 'getChildContext',
      value: function getChildContext() {
        return this.context;
      }
    }, {
      key: 'getStyles',
      value: function getStyles() {
        return {};
      }
    }, {
      key: 'getMjAttribute',
      value: function getMjAttribute(name) {
        return this.attributes[name] || undefined;
      }
    }, {
      key: 'getMjContent',
      value: function getMjContent() {
        return this.props.content.trim();
      }
    }, {
      key: 'getPadding',
      value: function getPadding(direction) {
        var paddingDirection = this.getMjAttribute('padding-' + direction);
        var padding = this.getMjAttribute('padding');

        if (paddingDirection) {
          return parseInt(paddingDirection);
        }

        if (!padding) {
          return 0;
        }

        var paddings = padding.split(' ');
        var directions = {};

        switch (paddings.length) {
          case 1:
            return parseInt(padding);

          case 2:
            directions = { top: 0, bottom: 0, left: 1, right: 1 };
            break;

          case 3:
            directions = { top: 0, left: 1, right: 1, bottom: 2 };
            break;

          case 4:
            directions = { top: 0, right: 1, bottom: 2, left: 3 };
            break;
        }

        return parseFloat(paddings[directions[direction]] || 0);
      }
    }, {
      key: 'generateHtmlAttributes',
      value: function generateHtmlAttributes(attributes) {
        var output = '';

        _lodash2.default.forEach(attributes, function (value, name) {
          if (value) {
            output += ' ' + name + '="' + value + '"';
          }
        });

        return output;
      }
    }, {
      key: 'generateStyles',
      value: function generateStyles(styles) {
        styles = styles ? typeof styles === 'string' ? _objectPath2.default.get(this.getStyles(), styles) : styles : this.getStyles();

        var output = '';

        _lodash2.default.forEach(styles, function (value, name) {
          if (value) {
            output += name + ':' + value + ';';
          }
        });

        return output;
      }
    }, {
      key: 'renderChildren',
      value: function renderChildren(children) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var _options$props = options.props,
            props = _options$props === undefined ? {} : _options$props,
            _options$renderer = options.renderer,
            renderer = _options$renderer === undefined ? function (component) {
          return component.render();
        } : _options$renderer;


        children = children || this.props.children;

        var sibling = children.length;

        var output = '';

        for (var index = 0; index < sibling; index++) {
          var child = children[index];
          var _component = (0, _components.initComponent)({
            type: type,
            name: child.tagName,
            initialDatas: _extends({}, child, {
              context: this.getChildContext(),
              props: _extends({}, props, {
                first: index === 0,
                index: index,
                last: index + 1 === sibling,
                sibling: sibling
              })
            })
          });

          if (_component !== null) {
            output += renderer(_component);
          }
        }

        return output;
      }
    }]);

    return Component;
  }(), (_applyDecoratedDescriptor(_class.prototype, 'getStyles', [_dec], Object.getOwnPropertyDescriptor(_class.prototype, 'getStyles'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'getPadding', [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, 'getPadding'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'generateHtmlAttributes', [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, 'generateHtmlAttributes'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'generateStyles', [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, 'generateStyles'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'renderChildren', [_dec5], Object.getOwnPropertyDescriptor(_class.prototype, 'renderChildren'), _class.prototype)), _class));


  var newComponent = Component;

  Object.assign(newComponent.prototype, component);

  return newComponent;
}